navi's code architecture is divided into 4 parts: components, profiles,
infrastructure  and assets.

A profile is composed of multiple components, and a device will usually add
device-specific information to components that requires it, while the assets
will contain any resource files that lives outside of nix.


Components have a tree-like architecture. For example, in the top level
components you can find the category headfull, which refers to devices which
should be user operated, and a sub category of this one is graphical, since you
can have a user operated device that doesn't have a screen, eg if you interact
with it through ssh. With that said they can all be accessed in a flat tree
layout, the tree layout only applies to the filesystem organization of the
codebase.


Profiles, themselves, are a combination of components made to fit a certain
task. If you want to create a web server then you'll use the web-server profile,
which will auto enable the components required (eg a load balancer, an HTTP
server, etc) and you will be able to add device specific information to the
components directly (eg to add websites your device hosts).

Profiles are thus done out of convenience to avoid boilerplate code across
different machines.
